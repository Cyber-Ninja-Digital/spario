const functions=require("firebase-functions"),admin=require("firebase-admin"),puppeteer=require("puppeteer-core"),chrome=require("chrome-aws-lambda"),cors=require("cors"),corsHandler=cors({origin:"https://www.panel-color.pl"}),JSZip=require("jszip"),{Storage:Storage}=require("@google-cloud/storage"),storage=new Storage,{createClient:createClient}=require("node-regon");async function checkUserStatuses(userSnapshot,context){console.log(`Checking statuses for user ${userSnapshot.id}`);const userData=userSnapshot.data(),personalDataStatus=userData.dane_personalne.status;"Zaakceptowane"!==personalDataStatus&&console.log(`Status of personalData is not "Zaakceptowane", it is "${personalDataStatus}"`);let allSamochodAccepted=!0;const samochod=userData.samochod;for(const dokument in samochod)"Zaakceptowane"!==samochod[dokument].status&&(console.log(`Status of ${dokument} is not "Zaakceptowane", it is "${samochod[dokument].status}"`),allSamochodAccepted=!1);let allDokumentyAccepted=!0;const dokumenty=userData.dokumenty;for(const dokument in dokumenty)"Zaakceptowane"!==dokumenty[dokument].status&&(console.log(`Status of ${dokument} is not "Zaakceptowane", it is "${dokumenty[dokument].status}"`),allDokumentyAccepted=!1);if("Zaakceptowane"===personalDataStatus&&allSamochodAccepted&&allDokumentyAccepted){console.log('All statuses are "Zaakceptowane", updating user status'),await userSnapshot.ref.update({status:"konto zweryfikowane"}),console.log("Updated user status");const updatedUserSnapshot=await userSnapshot.ref.get();if(console.log("Fetched updated user data"),"konto zweryfikowane"===updatedUserSnapshot.data().status){console.log('User status updated to "konto zweryfikowane", checking if document already exists in "umowy"');const umowyCollectionRef=admin.firestore().collection("users").doc(context.params.userId).collection("umowy");if(!(await umowyCollectionRef.where("Nazwa","==","Umowa Zlecenia").get()).empty)return void console.log('Document already exists in "umowy", not creating a new one');const pdfData={...userData,creationDate:admin.firestore.FieldValue.serverTimestamp(),statusUmowy:"Oczekuję na podpis",valid_until:admin.firestore.Timestamp.fromDate(new Date((new Date).getFullYear()+1,(new Date).getMonth(),(new Date).getDate())),user_id:context.params.userId,Nazwa:"Umowa Zlecenia",pdfUrl:"not_generated_yet",signatureUrl:`umowy/${context.params.userId}/signatureUrl`};console.log("Constructed pdfData");try{const pdfRef=umowyCollectionRef.doc();console.log("Obtained reference to umowy document"),await pdfRef.set(pdfData),console.log("Successfully created document in umowy")}catch(error){console.error(`Failed to create document in 'umowy': ${error}`)}}else console.log('Status of updated user data is not "konto zweryfikowane"')}else console.log('Not all statuses are "Zaakceptowane"')}async function createCarRentPDF(data,driverName,weekId){const rootRef=admin.database().ref(),carId=(await rootRef.child(`drivers/${driverName}/car`).once("value")).val(),carData=carId?(await rootRef.child(`admin/carsrent/${carId}`).once("value")).val():{},usersSnapshot=await admin.firestore().collection("users").where("driverId","==",driverName).get();if(usersSnapshot.empty)return console.error(`No document found for driverName: ${driverName}`),null;const driverData=usersSnapshot.docs[0].data(),currentDate=new Date,salesDate=`${currentDate.getDate()}-${currentDate.getMonth()+1}-${currentDate.getFullYear()}`,paymentDueDate=new Date(currentDate);paymentDueDate.setDate(currentDate.getDate()+7);const paymentDateFormatted=`${paymentDueDate.getDate()}-${paymentDueDate.getMonth()+1}-${paymentDueDate.getFullYear()}`,wynajemValue=parseFloat(data.wynajem),invoiceNumber=`FV 1/${currentDate.getMonth()+1}/${currentDate.getFullYear()}`,vatAmount=.23*wynajemValue,carDescription=`Wynajem ${carData.make} ${carData.model} nr. rej ${carData.number}`,dateRange=`od ${data.startDate} do ${data.endDate}`,rentAmountWords=function(n){const jednosci=["","jeden","dwa","trzy","cztery","pięć","sześć","siedem","osiem","dziewięć"],nascie=["dziesięć","jedenaście","dwanaście","trzynaście","czternaście","piętnaście","szesnaście","siedemnaście","osiemnaście","dziewiętnaście"],dziesiatki=["","","dwadzieścia","trzydzieści","czterdzieści","pięćdziesiąt","sześćdziesiąt","siedemdziesiąt","osiemdziesiąt","dziewięćdziesiąt"],setki=["","sto","dwieście","trzysta","czterysta","pięćset","sześćset","siedemset","osiemset","dziewięćset"];let wholePart=Math.floor(n),decimalPart=Math.round(100*(n-wholePart)),words=getWordsForNumber(wholePart);words+=" złotych",(decimalPart>0||0===wholePart)&&(words+=" "+getWordsForNumber(decimalPart)+" groszy");return words;function getWordsForNumber(num){if(0<=num&&num<10)return jednosci[num];if(10<=num&&num<20)return nascie[num-10];if(20<=num&&num<100)return dziesiatki[Math.floor(num/10)]+(num%10!=0?" "+jednosci[num%10]:"");if(100<=num&&num<1e3)return setki[Math.floor(num/100)]+(num%100!=0?" "+getWordsForNumber(num%100):"");if(1e3<=num&&num<1e6){const tys=Math.floor(num/1e3);return 1===tys?"tysiąc"+(num%1e3!=0?" "+getWordsForNumber(num%1e3):""):tys>=2&&tys<=4?getWordsForNumber(tys)+" tysiące"+(num%1e3!=0?" "+getWordsForNumber(num%1e3):""):getWordsForNumber(tys)+" tysięcy"+(num%1e3!=0?" "+getWordsForNumber(num%1e3):"")}return 1e6===num?"milion":"Liczba jest zbyt dużа!"}}(wynajemValue);console.log(rentAmountWords);const netAmount=.77*wynajemValue;const response=await fetch("https://firebasestorage.googleapis.com/v0/b/ccmcolorpartner.appspot.com/o/template%2Ffaktury_za_wynajem.html?alt=media&token=bdb8deb5-cd32-4ba7-b15d-4c4156ce70e4");let templateHtml=await response.text();templateHtml=templateHtml.replace(/PLACEHOLDER_ADRES/g,driverData.dane_personalne.correspondenceAddress),templateHtml=templateHtml.replace(/PLACEHOLDER_IMIE_NAZWISKO/g,`${driverData.firstName} ${driverData.lastName}`),templateHtml=templateHtml.replace(/PLACEHOLDER_INVOICE_NUMBER/g,invoiceNumber),templateHtml=templateHtml.replace(/PLACEHOLDER_SALES_DATE/g,salesDate),templateHtml=templateHtml.replace(/PLACEHOLDER_PAYMENT_DUE_DATE/g,paymentDateFormatted),templateHtml=templateHtml.replace(/PLACEHOLDER_CAR_DESCRIPTION/g,carDescription),templateHtml=templateHtml.replace(/PLACEHOLDER_DATE_RANGE/g,dateRange),templateHtml=templateHtml.replace(/PLACEHOLDER_NET_AMOUNT/g,netAmount.toFixed(2)),templateHtml=templateHtml.replace(/PLACEHOLDER_RENT_AMOUNT/g,wynajemValue.toFixed(2)),templateHtml=templateHtml.replace(/PLACEHOLDER_VAT_AMOUNT/g,vatAmount.toFixed(2)),templateHtml=templateHtml.replace(/PLACEHOLDER_SLOWNIE/g,rentAmountWords);const browser=await puppeteer.launch({executablePath:await chrome.executablePath,headless:!0,args:chrome.args}),page=await browser.newPage();await page.setContent(templateHtml);const pdfBuffer=await page.pdf({format:"A4"});return await browser.close(),pdfBuffer}async function createPDF(data,driverName,weekId){const usersSnapshot=await admin.firestore().collection("users").where("driverId","==",driverName).get();if(usersSnapshot.empty)return console.error(`No document found for driverName: ${driverName}`),null;const driverData=usersSnapshot.docs[0].data(),signatureUrl=driverData.signatureUrl||"",adres=driverData.dane_personalne.correspondenceAddress,imieINazwisko=`${driverData.firstName} ${driverData.lastName}`,currentDate=new Date,formattedDate=`${currentDate.getDate()}-${currentDate.getMonth()+1}-${currentDate.getFullYear()}`,numer=`${weekId}/${currentDate.getMonth()+1}/${currentDate.getFullYear()}`,startDate=data.startDate,endDate=data.endDate,response=await fetch("https://firebasestorage.googleapis.com/v0/b/ccmcolorpartner.appspot.com/o/template%2Frachunek_umowa_najmu.html?alt=media&token=59df9e07-7552-4cf7-83ca-3ce367030f2e");let templateHtml=await response.text();const umowaNajmuString=data.umowa_najmu.toFixed(2),[umowaNajmuFull,umowaNajmuDecimal]=umowaNajmuString.split(".");templateHtml=templateHtml.replace(/PLACEHOLDER_UMOWA_NAJMU/g,umowaNajmuString),templateHtml=templateHtml.replace(/PLACEHOLDER_FULL/g,umowaNajmuFull),templateHtml=templateHtml.replace(/PLACEHOLDER_DECIMAL/g,umowaNajmuDecimal),templateHtml=templateHtml.replace("PLACEHOLDER_ADRES",adres),templateHtml=templateHtml.replace("PLACEHOLDER_IMIE_NAZWISKO",imieINazwisko),templateHtml=templateHtml.replace("PLACEHOLDER_START_DATE",startDate),templateHtml=templateHtml.replace("PLACEHOLDER_END_DATE",endDate),templateHtml=templateHtml.replace("PLACEHOLDER_CURRENT_DATE",formattedDate),templateHtml=templateHtml.replace("PLACEHOLDER_NUMER",numer),templateHtml=templateHtml.replace("PLACEHOLDER_SIGNATURE",signatureUrl);const browser=await puppeteer.launch({executablePath:await chrome.executablePath,headless:!0,args:chrome.args}),page=await browser.newPage();await page.setContent(templateHtml);const pdfBuffer=await page.pdf({format:"A4"});return await browser.close(),pdfBuffer}async function saveToFirebaseStorage(pdfBuffer,fileName){const file=admin.storage().bucket("ccmcolorpartner.appspot.com").file(fileName),fileWriteStream=file.createWriteStream({metadata:{contentType:"application/pdf"}});fileWriteStream.end(pdfBuffer),await new Promise(((resolve,reject)=>{fileWriteStream.on("finish",resolve),fileWriteStream.on("error",reject)}));const[pdfDownloadUrl]=await file.getSignedUrl({action:"read",expires:"03-09-2491"});return pdfDownloadUrl}async function saveToFirebaseStorage(pdfBuffer,fileName){const file=admin.storage().bucket("ccmcolorpartner.appspot.com").file(fileName),fileWriteStream=file.createWriteStream({metadata:{contentType:"application/pdf"}});fileWriteStream.end(pdfBuffer),await new Promise(((resolve,reject)=>{fileWriteStream.on("finish",resolve),fileWriteStream.on("error",reject)}));const[pdfDownloadUrl]=await file.getSignedUrl({action:"read",expires:"03-09-2491"});return pdfDownloadUrl}function calculateUmowaNajmu(data){return Math.abs(data.przychod_dodatkowy||0)+Math.abs(data.kursy||0)+Math.abs(data.tips||0)-(Math.abs(data.inne||0)+Math.abs(data.commission||0)+Math.abs(data.vat_dodatkowy||0)+Math.abs(data.vat_przejazdy||0))+Math.abs(data.vat_bonus||0)-Math.abs(data.partner||0)-Math.abs(data.zwrot_kosztow||0)}async function createPdfVer(driverName,documentType){let templateUrl;switch(console.log("Document Type in Cloud Function:",documentType),documentType){case"regulamin":case"zasadyWspolpracy":templateUrl="https://firebasestorage.googleapis.com/v0/b/ccmcolorpartner.appspot.com/o/template%2Fzasday_wspolpracy.html?alt=media&token=3bc77319-a1e1-4dc2-a2ed-8d7345e6d7fc";break;case"rodo":templateUrl="https://firebasestorage.googleapis.com/v0/b/ccmcolorpartner.appspot.com/o/template%2Frodo.html?alt=media&token=45f753ce-88a9-4d7b-9598-b16056f40cd8";break;default:throw new Error("Invalid document type")}console.log("Using templateUrl:",templateUrl);const usersSnapshot=await admin.firestore().collection("users").where("driverId","==",driverName).get();if(usersSnapshot.empty)throw console.error(`No user found with driverId: ${driverName}`),new Error(`No user found with driverId: ${driverName}`);const userDoc=usersSnapshot.docs[0],userMainData=userDoc.data(),userId=userDoc.id,danePersonalneSnapshot=await admin.firestore().collection("users").doc(userId).collection("dokumenty").doc("dane_personalne").get();if(!danePersonalneSnapshot.exists)throw console.error(`No dane_personalne found for userId: ${userId}`),new Error(`No dane_personalne found for userId: ${userId}`);const driverData=danePersonalneSnapshot.data();console.log("Retrieved driverData:",driverData);const documentSignatureSnapshot=await admin.firestore().collection("users").doc(userId).collection("dokumenty").doc(documentType).get();let signatureUrl="OCZEKUJĘ NA PODPIS";documentSignatureSnapshot.exists&&documentSignatureSnapshot.data().signature&&(signatureUrl=documentSignatureSnapshot.data().signature);const response=await fetch(templateUrl);let templateHtml=await response.text();templateHtml=templateHtml.replace("PLACEHOLDER_FIRST_NAME",userMainData.firstName),templateHtml=templateHtml.replace("PLACEHOLDER_LAST_NAME",userMainData.lastName),templateHtml=templateHtml.replace("PLACEHOLDER_PESEL",driverData.pesel),templateHtml=templateHtml.replace("PLACEHOLDER_REGISTRATION_ADDRESS",driverData.registrationAddress),templateHtml=templateHtml.replace("PLACEHOLDER_DATE",(new Date).toLocaleDateString()),templateHtml=templateHtml.replace("PLACEHOLDER_SIGNATURE",`<img src="${signatureUrl}" alt="Podpis" width="150" height="100">`);const browser=await puppeteer.launch({args:chrome.args,executablePath:await chrome.executablePath,headless:chrome.headless}),page=await browser.newPage();await page.setContent(templateHtml);const pdfBuffer=await page.pdf({format:"A4"}),file=admin.storage().bucket().file(`documents/${driverName}/${documentType}.pdf`);await file.save(pdfBuffer);const pdfUrl=await file.getSignedUrl({action:"read",expires:"03-17-2025"});return"OCZEKUJĘ NA PODPIS"!==signatureUrl&&await admin.firestore().collection("users").doc(userId).collection("dokumenty").doc(documentType).set({signed:!0,pdfUrl:pdfUrl[0]},{merge:!0}),await browser.close(),pdfUrl[0]}admin.initializeApp(),exports.checkUserStatus=functions.firestore.document("users/{userId}").onWrite((async(change,context)=>{context.params.userId;return console.log(`Processing user document for id ${context.params.userId}`),await checkUserStatuses(change.after,context)})),exports.checkUserStatus=functions.firestore.document("users/{userId}").onWrite((async(change,context)=>{context.params.userId;return console.log(`Processing user document for id ${context.params.userId}`),await checkUserStatuses(change.after,context)})),exports.processGeneratedPdf=functions.firestore.document("users/{userId}/umowy/{umowyId}").onUpdate((async(change,context)=>{const newValue=change.after.data();if(!change.before.data().output&&newValue.output){const pdfUrl=newValue.output.download;if(console.log(`Generated PDF URL: ${pdfUrl}`),!pdfUrl)return void console.log("No PDF URL was generated. The PDF generation may have failed.");try{const umowyRef=admin.firestore().collection("users").doc(context.params.userId).collection("umowy").doc(context.params.umowyId);await umowyRef.update({pdfUrl:pdfUrl}),console.log(`Updated umowy document with PDF URL: ${pdfUrl}`)}catch(error){console.error(`Failed to update umowy document with PDF URL: ${error}`)}}else console.log("The output field did not change. This function may have been triggered by a different update.")})),exports.generatePdfUrl=functions.firestore.document("users/{userId}/umowy/{umowyId}").onCreate((async(snapshot,context)=>{snapshot.data();const fileName=context.params.umowyId+".pdf",bucket=admin.storage().bucket("ccmcolorpartner.appspot.com");try{const[url]=await bucket.file(fileName).getSignedUrl({action:"read",expires:"03-09-2491"});console.log(`Generated signed URL for PDF: ${url}`),await snapshot.ref.update({pdfUrl:url}),console.log(`Updated umowy document with signed URL: ${url}`)}catch(error){console.error(`Failed to generate signed URL or update umowy document: ${error}`)}})),exports.handleStatusChangeToSigned=functions.firestore.document("users/{userId}/umowy/{umowyId}").onUpdate((async(change,context)=>{const newValue=change.after.data();if("Umowa została podpisana"!==change.before.data().statusUmowy&&"Umowa została podpisana"===newValue.statusUmowy){console.log(`Document with id ${context.params.umowyId} was signed, generating a new document...`);const signatureUrlFromUpdatedDocument=newValue.signatureUrl,userData=newValue,today=(userData.dane_personalne,new Date),formattedDate=`${today.getDate()}-${today.getMonth()+1}-${today.getFullYear()}`,pdfData={...userData,creationDate:admin.firestore.FieldValue.serverTimestamp(),statusUmowy:"Umowa Podpisana",valid_until:admin.firestore.Timestamp.fromDate(new Date((new Date).getFullYear()+1,(new Date).getMonth(),(new Date).getDate())),user_id:context.params.userId,Nazwa:"Umowa Zlecenia",pdfUrl:"not_generated_yet",signatureUrl:signatureUrlFromUpdatedDocument,currentDate:formattedDate};console.log("Constructed pdfData for new document");try{const umowyCollectionRef=admin.firestore().collection("users").doc(context.params.userId).collection("umowy");await change.before.ref.delete(),console.log(`Deleted the previous document with id: ${context.params.umowyId}`);const newUmowyDocRef=umowyCollectionRef.doc();console.log("Obtained reference to new umowy document"),await newUmowyDocRef.set(pdfData),console.log("Successfully created new document in umowy");(await admin.firestore().collection("users").where("role","==","admin").get()).forEach((async adminDoc=>{const adminEmail=adminDoc.data().email;if(!adminEmail)return void console.error(`Admin with id ${adminDoc.id} does not have an email address`);const emailData={to:adminEmail,message:{subject:"Nowa podpisana umowa",html:`\n                                Drogi Adminie,<br><br>\n                                Nowa umowa została podpisana przez użytkownika ${newValue.firstName} ${newValue.lastName}. Proszę sprawdzić aplikację, aby uzyskać szczegóły.<br><br>\n                                Pozdrawiamy,<br>\n                                Twój zespół\n                            `}};await admin.firestore().collection("mail").add(emailData),console.log(`Added email data for ${adminEmail} to Firestore`)}))}catch(error){console.error(`Failed to handle the signed document: ${error}`)}}else console.log('Status did not change to "Umowa została podpisana", no action taken.')})),exports.handleStatusChangeToWyslanaUmowaZlecenia=functions.firestore.document("users/{userId}").onUpdate((async(change,context)=>{const newValue=change.after.data();if("Wysłana Umowa Zlecenia do podpisu"!==change.before.data().statusUmow&&"Wysłana Umowa Zlecenia do podpisu"===newValue.statusUmow){console.log(`statusUmow changed to "Wysłana Umowa Zlecenia do podpisu" for user with id ${context.params.userId}`);const response=await fetch("https://firebasestorage.googleapis.com/v0/b/ccmcolorpartner.appspot.com/o/template%2Findex.html?alt=media&token=a2d7d64c-48df-4c5a-8897-4b634f4ec32d"),templateHtml=await response.text(),browser=await puppeteer.launch({executablePath:await chrome.executablePath,headless:!0,args:chrome.args}),page=await browser.newPage();await page.setContent(templateHtml);const pdfBuffer=await page.pdf({format:"A4"});await browser.close();const bucket=admin.storage().bucket("ccmcolorpartner.appspot.com"),fileName=`${context.params.userId}/umowaZlecenia.pdf`,file=bucket.file(fileName),fileWriteStream=file.createWriteStream({metadata:{contentType:"application/pdf"}});return fileWriteStream.end(pdfBuffer),new Promise(((resolve,reject)=>{fileWriteStream.on("finish",(async()=>{console.log(`PDF saved to Firebase Storage as ${fileName}`);const[pdfDownloadUrl]=await file.getSignedUrl({action:"read",expires:"03-09-2491"}),umowyCollection=admin.firestore().collection("users").doc(context.params.userId).collection("umowy"),newUmowyDoc=await umowyCollection.add({pdfUrl:pdfDownloadUrl,title:"Umowa Zlecenia",statusUmowy:"Oczekuję na podpis",creationDate:(new Date).toISOString(),expiryYear:(new Date).getFullYear()+1});console.log(`New umowy document created with ID: ${newUmowyDoc.id}`),console.log(`Updated Firestore with signed URL: ${pdfDownloadUrl}`),resolve()})),fileWriteStream.on("error",reject)}))}console.log('statusUmow did not change to "Wysłana Umowa Zlecenia do подpisu", no action taken.')})),exports.handleRozliczenieDodaneStatusChange=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val();return"Rozliczenie dodane"!==change.before.val().status&&"Rozliczenie dodane"===newValue.status&&(await new Promise((resolve=>setTimeout(resolve,1e4))),await change.after.ref.update({status:"Rozliczam faktury"})),null})),exports.handleRozliczenieDodaneStatusCreate=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onCreate((async(snapshot,context)=>("Rozliczenie dodane"===snapshot.val().status&&(await new Promise((resolve=>setTimeout(resolve,1e4))),await snapshot.ref.update({status:"Rozliczam faktury"})),null))),exports.calculateInvoicesAndExpensesOnChange=functions.database.ref("drivers/{driverId}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val(),previousValue=change.before.val(),driverId=context.params.driverId;if("Rozliczam faktury"!==previousValue.status&&"Rozliczam faktury"===newValue.status){const rootRef=admin.database().ref();let invoices=await rootRef.child(`drivers/${driverId}/invoices`).once("value").then((snap=>snap.val()))||{},expensesValue=0,invoiceValue=0,vatReturn=0;const startDate=new Date(newValue.startDate),endDate=new Date(newValue.endDate);Object.values(invoices).forEach((invoice=>{let invoiceDate=new Date(invoice.purchaseDate+"T00:00:00");invoice&&"zaakceptowany"===invoice.status&&invoiceDate>=startDate&&invoiceDate<=endDate&&("wydatek"===invoice.type?expensesValue+=Number(invoice.grossAmount||0):"faktura"===invoice.type&&(invoiceValue+=Number(invoice.grossAmount||0),vatReturn+=Number(invoice.vatReturn||0)))}));const totalUpdated=("number"!=typeof(value=newValue.total)||isNaN(value)?0:value)+vatReturn-expensesValue;await change.after.ref.update({total:totalUpdated,inne:expensesValue,zwrot_kosztow:invoiceValue,vat_bonus:vatReturn}),await change.after.ref.update({status:"Rozliczam Najem Samochodu"})}var value;return null})),exports.handleCarRentStatusChange=functions.runWith({memory:"1GB"}).database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val(),previousValue=change.before.val(),driverName=context.params.driverName;if("Rozliczam Najem Samochodu"!==previousValue.status&&"Rozliczam Najem Samochodu"===newValue.status){const rootRef=admin.database().ref(),carId=(await rootRef.child(`drivers/${driverName}/car`).once("value")).val(),startDate=newValue.startDate,endDate=newValue.endDate;let rentValue=0;carId?rentValue=(await rootRef.child(`admin/carsrent/${carId}/rent`).once("value")).val()||0:console.error(`No car ID found for driver: ${driverName}`);const totalUpdated=newValue.total-rentValue;if(await change.after.ref.update({total:totalUpdated,wynajem:rentValue}),await change.after.ref.update({status:"Rozliczam ZUS"}),rentValue>0){const pdfBuffer=await createCarRentPDF(newValue,context.params.driverName,context.params.weekId),fileName=`${context.params.driverName}/fakturyzawynajem/carRent_${context.params.weekId}.pdf`,pdfUrl=await saveToFirebaseStorage(pdfBuffer,fileName),userFakturyRef=rootRef.child(`drivers/${driverName}/fakturyzawynajem/${context.params.weekId}`);await userFakturyRef.set({pdfUrl:pdfUrl,status:"Faktura wygenerowana",startDate:startDate,endDate:endDate});const adminFakturyRef=admin.database().ref(`admin/faktury_za_wynajem/${context.params.weekId}/${context.params.driverName}`);await adminFakturyRef.set({pdfUrl:pdfUrl,status:"Faktura wygenerowana",startDate:startDate,endDate:endDate})}}return null})),exports.handleZUSStatusChange=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val(),previousValue=change.before.val(),driverName=context.params.driverName,currentDate=new Date,currentMonth=currentDate.getMonth(),currentDay=currentDate.getDate();let shouldUpdateToPartnerStatus=!1;if("Rozliczam ZUS"!==previousValue.status&&"Rozliczam ZUS"===newValue.status){const rootRef=admin.database().ref(),allDriverWeeks=(await rootRef.child(`drivers/${driverName}/weeks`).once("value")).val(),isDriverFirstCalculation=!allDriverWeeks||1===Object.keys(allDriverWeeks).length,previousZUSCalculations=(await rootRef.child(`drivers/${driverName}/weeks`).orderByChild("month").equalTo(currentMonth).once("value")).val();let zusAlreadyCalculated=!1;for(let weekId in previousZUSCalculations)if(previousZUSCalculations[weekId].zus&&previousZUSCalculations[weekId].zus>0){zusAlreadyCalculated=!0;break}if((!zusAlreadyCalculated||isDriverFirstCalculation)&&(currentDay>=5&&currentDay<=11||isDriverFirstCalculation)){let valueZUS=await rootRef.child(`drivers/${driverName}/valueZUS`).once("value").then((snap=>snap.val()))||0;valueZUS||(valueZUS=(await rootRef.child("admin/valueZUS").once("value")).val()||0);const updateData={total:newValue.total-valueZUS,zus:valueZUS||0};valueZUS>0&&(updateData.koztyUZ=165.55),await change.after.ref.update(updateData),shouldUpdateToPartnerStatus=!0}else shouldUpdateToPartnerStatus=!0}return shouldUpdateToPartnerStatus&&"Rozliczam kwotę Partnera"!==newValue.status&&await change.after.ref.update({status:"Rozliczam kwotę Partnera"}),null})),exports.handlePartnerStatusChange=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val(),previousValue=change.before.val(),driverName=context.params.driverName;if("Rozliczam kwotę Partnera"!==previousValue.status&&"Rozliczam kwotę Partnera"===newValue.status){const rootRef=admin.database().ref();let valuePartner=await rootRef.child(`drivers/${driverName}/valuePartner`).once("value").then((snap=>snap.val()));valuePartner?console.log(`Using valuePartner from driver ${driverName}: ${valuePartner}`):(valuePartner=(await rootRef.child("admin/valuePartner").once("value")).val()||0,console.log(`Using valuePartner from admin: ${valuePartner}`));const totalUpdated=newValue.total-valuePartner;await change.after.ref.update({total:totalUpdated,partner:valuePartner}),await change.after.ref.update({status:"Rozliczam Umowę Najmu"})}})),exports.updateUmowaNajmuAndStatus=functions.runWith({memory:"1GB"}).database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val(),previousValue=change.before.val();if("Rozliczam Umowę Najmu"!==previousValue.status&&"Rozliczam Umowę Najmu"===newValue.status){const umowaNajmuValue=calculateUmowaNajmu(newValue);await change.after.ref.child("umowa_najmu").set(umowaNajmuValue),await change.after.ref.child("status").set("Czekam na Rozliczenie PIT"),console.log(`Updated umowa_najmu value and status for driver ${context.params.driverName} and week ${context.params.weekId}`)}else if("Czekam na Rozliczenie PIT"!==previousValue.status&&"Czekam na Rozliczenie PIT"===newValue.status){const podatek_do_zaplaty=.085*newValue.umowa_najmu;await change.after.ref.child("podatek_do_zaplaty").set(podatek_do_zaplaty),await change.after.ref.child("status").set("Kierowca Rozliczony"),console.log(`Calculated tax and updated status to "Kierowca Rozliczony" for driver ${context.params.driverName} and week ${context.params.weekId}`)}const pdfBuffer=await createPDF(newValue,context.params.driverName,context.params.weekId),fileName=`${context.params.driverName}/umowaNajmu_${context.params.weekId}.pdf`,pdfUrl=await saveToFirebaseStorage(pdfBuffer,fileName),pit28Ref=admin.database().ref(`drivers/${context.params.driverName}/pit28/${context.params.weekId}`),startDate=newValue.startDate,endDate=newValue.endDate,currentDate=new Date,numer=`${context.params.weekId}/${currentDate.getMonth()+1}/${currentDate.getFullYear()}`;await pit28Ref.set({umowa_najmu:newValue.umowa_najmu,podatek_do_zaplaty:.085*newValue.umowa_najmu,pdfUrl:pdfUrl,status:"Kierowca Rozliczony",startDate:startDate,endDate:endDate,numer:numer,weekId:context.params.weekId}),console.log(`PIT28 info saved for driver ${context.params.driverName} and week ${context.params.weekId}`);const adminPit28Ref=admin.database().ref(`admin/pit28/${context.params.weekId}/${context.params.driverName}`);await adminPit28Ref.set({driverId:context.params.driverName,umowa_najmu:newValue.umowa_najmu,podatek_do_zaplaty:.085*newValue.umowa_najmu,pdfUrl:pdfUrl,status:"Dokument wygenerowany",startDate:startDate,endDate:endDate,numer:numer,weekId:context.params.weekId}),console.log(`PIT28 info saved for admin for driver ${context.params.driverName} and week ${context.params.weekId}`)})),exports.updateDriverBalance=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val();if("Kierowca Rozliczony"!==change.before.val().status&&"Kierowca Rozliczony"===newValue.status){const totalValue=newValue.total||0,driverRef=change.after.ref.parent.parent.parent,updatedBalance=((await driverRef.once("value")).val().balance||0)+totalValue;await driverRef.child("balance").set(updatedBalance),await change.after.ref.child("status").set("Generuję kwotę przelewu"),console.log(`Updated balance for driver ${context.params.driverName} and set status to "Generuję kwotę przelewu"`)}})),exports.generateTransferAmount=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val();if("Generuję kwotę przelewu"!==change.before.val().status&&"Generuję kwotę przelewu"===newValue.status){const umowaNajmu=newValue.total||0,gotowka=Math.abs(newValue.gotowka)||0,zwrotKosztow=newValue.zwrot_kosztow||0,roznica=gotowka-zwrotKosztow,przelew=umowaNajmu-gotowka+zwrotKosztow+(newValue.koztyUZ||0)-(newValue.wynajem||0);await change.after.ref.update({roznica:roznica,przelew:przelew,status:"Rozliczenie zakończone"})}return null})),exports.notifyDriver=functions.database.ref("drivers/{driverName}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const newValue=change.after.val();if("Wyślij rozliczenie"!==change.before.val().status&&"Wyślij rozliczenie"===newValue.status){const driverName=context.params.driverName,usersSnapshot=await admin.firestore().collection("users").where("driverId","==",driverName).limit(1).get();if(usersSnapshot.empty)return console.error(`No user found in Firestore with the driverId ${driverName}`),null;const driverEmail=usersSnapshot.docs[0].data().mail;if(!driverEmail)return console.error(`User with driverId ${driverName} does not have an email address`),null;const emailData={to:driverEmail,message:{subject:"Twoje rozliczenie jest gotowe!",html:"\n                        Drogi kierowco,<br><br>\n                        Twoje rozliczenie za tydzień jest gotowe. Proszę sprawdzić aplikację, aby uzyskać szczegóły.<br><br>\n                        Pozdrawiamy,<br>\n                        Twój zespół\n                    "}};await admin.firestore().collection("mail").add(emailData),console.log(`Added email data for ${driverEmail} to Firestore`),await change.after.ref.update({status:"Rozliczenie wysłane na maila"})}})),exports.sendNotifications=functions.https.onRequest(((request,response)=>corsHandler(request,response,(async()=>{if("OPTIONS"===request.method)return response.set("Access-Control-Allow-Methods","POST"),response.set("Access-Control-Allow-Headers","Content-Type"),response.set("Access-Control-Allow-Origin","https://www.panel-color.pl"),void response.status(204).send("");const{users:users,subject:subject,message:message,imageUrl:imageUrl}=request.body;if(!users||!subject||!message)return void response.status(400).send({error:"Some required parameters are missing."});const formattedMessage=message.replace(/\n/g,"<br>")+"<br><br>Pozdrawiamy, zespół ColorPartner";try{let targetUsers=[];if(users.includes("all")){(await admin.firestore().collection("users").get()).forEach((doc=>targetUsers.push(doc.data())))}else for(const userId of users){const userSnapshot=await admin.firestore().collection("users").doc(userId).get();if(!userSnapshot.exists)throw new Error(`No user found in Firestore with the userId ${userId}`);targetUsers.push(userSnapshot.data())}const promises=targetUsers.map((userData=>{const userEmail=userData.email;if(!userEmail)throw new Error(`User with userId ${userData.id} does not have an email address`);const emailData={to:userEmail,message:{subject:subject,html:`${formattedMessage}<br><br>${imageUrl?`<img src="${imageUrl}" alt="Attached Image"/>`:""}`}};return admin.firestore().collection("mail").add(emailData)}));await Promise.all(promises),response.set("Access-Control-Allow-Origin","https://www.panel-color.pl"),response.send({status:"success"})}catch(error){console.error("Error sending notifications:",error),response.status(500).send({error:"Failed to send notifications."})}})))),exports.updateFinance=functions.https.onRequest(((request,response)=>corsHandler(request,response,(async()=>{if("OPTIONS"===request.method)return response.set("Access-Control-Allow-Methods","POST"),response.set("Access-Control-Allow-Headers","Content-Type"),response.set("Access-Control-Allow-Origin","https://www.panel-color.pl"),void response.status(204).send("");const{month:month,type:type,description:description,brutto:brutto,vat:vat,netto:netto}=request.body;if(!(month&&type&&description&&brutto&&vat&&netto))return void response.status(400).send({error:"Some required parameters are missing."});const financeRef=admin.firestore().collection("finances").doc(month);let financeData=await financeRef.get();if(!financeData.exists){const initialData={"Przychód":{brutto:0,netto:0,vat:0,details:{}},Wydatki:{brutto:0,netto:0,vat:0,details:{}},"Dochód netto":0,"Dochód brutto":0,"Dochód VAT":0};await financeRef.set(initialData),financeData=await financeRef.get()}console.log("financeData exists:",financeData.exists);const currentData=financeData.data();currentData[type]||(currentData[type]={brutto:0,netto:0,vat:0,details:{}});const transactionData={date:admin.firestore.Timestamp.fromDate(new Date(request.body.date)),description:request.body.description,brutto:request.body.brutto,vat:request.body.vat,netto:request.body.netto},transactionId=financeRef.collection(type).doc().id;currentData[type].details[transactionId]=transactionData,console.log("Current type:",type),console.log("Current data:",currentData),currentData[type].brutto+=request.body.brutto,currentData[type].vat+=request.body.brutto*(request.body.vat/100),currentData[type].netto+=request.body.netto,currentData["Dochód brutto"]=currentData["Przychód"].brutto-currentData.Wydatki.brutto,currentData["Dochód netto"]=currentData["Przychód"].netto-currentData.Wydatki.netto,currentData["Dochód VAT"]=currentData["Przychód"].vat-currentData.Wydatki.vat;try{await financeRef.update(currentData),response.send({status:"success"})}catch(error){console.error("Error updating finance data:",error),response.status(500).send({error:"Failed to update finance data."})}})))),exports.createTransactionsFromSummary=functions.database.ref("drivers/{driverId}/weeks/{weekId}/summary").onUpdate((async(change,context)=>{const beforeData=change.before.val(),afterData=change.after.val();if("Rozliczenie zakońoczone"!==beforeData.status&&"Rozliczenie zakońoczone"===afterData.status){const monthNames=["January","February","March","April","May","June","July","August","September","October","November","December"],currentDate=new Date(afterData.endDate),month=monthNames[currentDate.getMonth()],year=currentDate.getFullYear(),financeRef=admin.firestore().collection("finances").doc(`${month} ${year}`);let financeData=await financeRef.get();if(!financeData.exists){const initialData={"Przychód":{brutto:0,netto:0,vat:0,details:{}},Wydatki:{brutto:0,netto:0,vat:0,details:{}},"Dochód netto":0,"Dochód brutto":0,"Dochód VAT":0};await financeRef.set(initialData),financeData=await financeRef.get()}const currentData=financeData.data(),driver=context.params.driverId,week=context.params.weekId,generateTransaction=(amount,vatPercentage,description)=>{const vat=amount*vatPercentage;return{date:admin.firestore.Timestamp.fromDate(new Date(afterData.endDate)),description:`${description} ${driver} ${week}`,brutto:amount+vat,vat:vat,netto:amount}},addTransaction=(type,transaction)=>{const transactionId=financeRef.collection(type).doc().id;currentData[type].details[transactionId]=transaction,currentData[type].brutto+=transaction.brutto,currentData[type].vat+=transaction.vat,currentData[type].netto+=transaction.netto};addTransaction("Wydatki",generateTransaction(afterData.commission,.08,"Commission")),addTransaction("Wydatki",generateTransaction(afterData.gotowka,0,`Gotówka ${driver} ${week}`)),addTransaction("Wydatki",generateTransaction(afterData.inne,0,`Inne ${driver} ${week}`)),addTransaction("Przychód",generateTransaction(afterData.kursy,afterData.vat_przejazdy/afterData.kursy,`Kursy ${driver} ${week}`)),addTransaction("Przychód",generateTransaction(parseFloat(afterData.partner),0,`Opłata partnerska ${driver} ${week}`)),addTransaction("Przychód",generateTransaction(afterData.przychod_dodatkowy,afterData.vat_dodatkowy/afterData.przychod_dodatkowy,`Przychód dodatkowy ${driver} ${week}`)),addTransaction("Wydatki",generateTransaction(afterData.total,0,`Wypłata ${driver} ${week}`)),addTransaction("Przychód",generateTransaction(parseFloat(afterData.wynajem),0,`Wynajem ${driver} ${week}`)),addTransaction("Przychód",generateTransaction(parseFloat(afterData.zus),0,`ZUS ${driver} ${week}`)),addTransaction("Wydatki",generateTransaction(afterData.vat_bonus,1,`VAT Bonus ${driver} ${week}`)),currentData["Dochód brutto"]=currentData["Przychód"].brutto-currentData.Wydatki.brutto,currentData["Dochód netto"]=currentData["Przychód"].netto-currentData.Wydatki.netto,currentData["Dochód VAT"]=currentData["Przychód"].vat-currentData.Wydatki.vat;try{await financeRef.update(currentData)}catch(error){return console.error("Error updating finance data:",error),null}}return null})),exports.generateDocument=functions.runWith({timeoutSeconds:540,memory:"2GB"}).https.onRequest((async(req,res)=>{corsHandler(req,res,(async()=>{try{const driverName=req.body.driverName,documentType=req.body.documentType;console.log("Received request path:",req.path),console.log("Received driverName:",driverName),console.log("Determined documentType:",documentType);const pdfUrl=await createPdfVer(driverName,documentType);if(!pdfUrl)return void res.status(500).send("Error generating the document.");res.set("Content-Type","application/json"),res.send({pdfUrl:pdfUrl})}catch(error){console.error("Error in generateDocument:",error),res.status(500).send("Internal server error.")}}))}));const generateUniqueName=invoiceNumber=>{const date=new Date;return`${`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}_${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`}_${invoiceNumber.replace(/\//g,"-")}`};exports.onInvoiceStatusChange=functions.database.ref("drivers/{driverName}/invoices/{invoiceId}").onUpdate((async(change,context)=>{const beforeData=change.before.val(),afterData=change.after.val();if("zaakceptowany"!==beforeData.status&&"zaakceptowany"===afterData.status){const monthYear=afterData.purchaseDate.slice(0,7),companyData=await fetchDataFromRegon(afterData.nipseller),dataToSave={numerfaktury:afterData.numerfaktury,vatAmount:afterData.vatAmount,vatRate:afterData.vatRate,netAmount:afterData.netAmount,grossAmount:afterData.grossAmount,fileURL:afterData.fileURL,companyName:companyData.companyName,address:companyData.address},uniqueDocName=generateUniqueName(afterData.numerfaktury);await admin.firestore().collection("finance").doc(monthYear).collection("wydatki").doc(uniqueDocName).set(dataToSave),console.log(`Invoice ${afterData.numerfaktury} for month ${monthYear} saved in Firestore with doc name ${uniqueDocName}.`)}}));const fetchDataFromRegon=async nip=>{console.log(`Fetching data for NIP: ${nip}`);try{console.log("Creating client for REGON...");const client=await createClient({key:"c2722d1516fe4455a818",birVersion:"1.1",sandbox:!1});console.log("Client created successfully."),console.log("Finding company by NIP...");const findCompanyByNip=await client.findByNip(nip);console.log(`Found company with Regon: ${findCompanyByNip.Regon}`),console.log("Fetching full report...");const companyRegon=findCompanyByNip.Regon;await client.getFullReport(companyRegon,findCompanyByNip.Typ,findCompanyByNip.SilosID);return console.log("Full report fetched successfully."),{nip:findCompanyByNip.NIP,companyName:findCompanyByNip.Nazwa,address:`${findCompanyByNip.Ulica} ${findCompanyByNip.NrNieruchomosci}, ${findCompanyByNip.KodPocztowy} ${findCompanyByNip.Miejscowosc}`}}catch(error){throw console.error("Error fetching data from REGON:",error),error}};exports.generateJPKVAT=functions.https.onRequest(((request,response)=>{corsHandler(request,response,(async()=>{if("OPTIONS"===request.method)return response.set("Access-Control-Allow-Methods","POST"),response.set("Access-Control-Allow-Headers","Content-Type"),response.set("Access-Control-Allow-Origin","https://www.panel-color.pl"),void response.status(204).send("");try{if(console.log("Received request:",request.body),!request.body.month||!request.body.year)return console.warn("Year and Month parameters are required in request."),void response.status(400).send("Year and Month parameters are required");const combinedXML=await generateXMLForSales(request.body.year,request.body.month),fileURL=await saveXMLToStorage(combinedXML,request.body.year,request.body.month),month=request.body.month,year=request.body.year,docId=`${year}-${month}`;console.log("Saving metadata to Firestore..."),await admin.firestore().collection("finance").doc(docId).collection("jpk_reports").add({generationDate:new Date,month:month,year:year,fileURL:fileURL}),console.log("JPK VAT generation and save completed successfully."),response.status(200).json({fileURL:fileURL})}catch(error){console.error("Error generating JPK VAT:",error),response.status(500).send("Internal server error")}}))}));const generateXMLForSales=async(year,month)=>{const path=`${year}-${month}`,sprzedazRef=admin.firestore().collection("finance").doc(path).collection("przychody"),zakupRef=admin.firestore().collection("finance").doc(path).collection("wydatki"),zakupSnapshot=await zakupRef.get(),sprzedazSnapshot=await sprzedazRef.get(),currentDateTime=(new Date).toISOString();if(sprzedazSnapshot.empty&&zakupSnapshot.empty)return console.log("No sales or purchases data found for the given month/year."),"</tns:JPK>";let totalVATSales=0,totalVATPurchases=0,totalNetPurchases=0,P_42=totalNetPurchases,P_43=totalVATPurchases,P_48=P_43,P_51=0-P_48,P_53=P_48>0?P_48-0:0,P_62=P_53==P_48-0?P_53:0,xml=`<tns:JPK xmlns:tns="http://crd.gov.pl/wzor/2021/12/27/11148/" xmlns:etd="http://crd.gov.pl/xml/schematy/dziedzinowe/mf/2021/06/08/eD/DefinicjeTypy/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n        <tns:Naglowek>\n            <tns:KodFormularza kodSystemowy="JPK_V7M (2)" wersjaSchemy="1-0E">JPK_VAT</tns:KodFormularza>\n            <tns:WariantFormularza>2</tns:WariantFormularza>\n            <tns:DataWytworzeniaJPK>${currentDateTime}</tns:DataWytworzeniaJPK>\n            <tns:NazwaSystemu>Ognik Premium</tns:NazwaSystemu>\n            <tns:CelZlozenia poz="P_7">1</tns:CelZlozenia>\n            <tns:KodUrzedu>0224</tns:KodUrzedu>\n            <tns:Rok>${year}</tns:Rok>\n            <tns:Miesiac>${month}</tns:Miesiac>\n        </tns:Naglowek>\n        <tns:Podmiot1 rola="Podatnik">\n            <tns:OsobaNiefizyczna>\n                <tns:NIP>8943198563</tns:NIP>\n                <tns:PelnaNazwa>\n                COLOR PARTNER SPÓŁKA Z OGRANICZONĄ ODPOWIEDZIALNOŚCIĄ\n                </tns:PelnaNazwa>\n                <tns:Email>krystynalupa@wp.pl</tns:Email>\n            </tns:OsobaNiefizyczna>\n        </tns:Podmiot1>`;xml+=`\n    <tns:Deklaracja>\n    <tns:Naglowek>\n<tns:KodFormularzaDekl kodSystemowy="VAT-7 (22)" kodPodatku="VAT" rodzajZobowiazania="Z" wersjaSchemy="1-0E">VAT-7</tns:KodFormularzaDekl>\n<tns:WariantFormularzaDekl>22</tns:WariantFormularzaDekl>\n</tns:Naglowek>\n        <tns:PozycjeSzczegolowe>\n        <tns:P_38>${Math.round(0)}</tns:P_38>\n        <tns:P_42>${Math.round(P_42)}</tns:P_42>\n        <tns:P_43>${Math.round(P_43)}</tns:P_43>\n        <tns:P_48>${Math.round(P_48)}</tns:P_48>\n        <tns:P_51>${Math.round(P_51)}</tns:P_51>\n        <tns:P_53>${Math.round(P_53)}</tns:P_53>\n        <tns:P_62>${Math.round(P_62)}</tns:P_62>        \n        </tns:PozycjeSzczegolowe>\n        <tns:Pouczenia>1</tns:Pouczenia>\n    </tns:Deklaracja>\n    <tns:Ewidencja>\n    `;sprzedazSnapshot.forEach((doc=>{const data=doc.data();totalVATSales+=parseFloat(data.vatAmount||"0"),xml+=`\n                <tns:SprzedazWiersz>\n                <tns:LpZakupu>0</tns:tns:LpZakupu>\n                    <tns:NrKontrahenta>${data.nip}</tns:NrKontrahenta>\n                    <tns:NazwaKontrahenta>${data.companyName}</tns:NazwaKontrahenta>\n                    <tns:AdresKontrahenta>${data.address}</tns:AdresKontrahenta>\n                    <tns:DowodSprzedazy>${data.numerfaktury}</tns:DowodSprzedazy>\n                    <tns:DataWystawienia>${data.purchaseDate}</tns:DataWystawienia>\n                    <tns:K_19>${data.netAmount}</tns:K_19>\n                    <tns:K_20>${data.vatAmount}</tns:K_20>\n                </tns:SprzedazWiersz>\n            `})),xml+=`\n    <tns:SprzedazCtrl>\n        <tns:LiczbaWierszySprzedazy>${sprzedazSnapshot.size}</tns:LiczbaWierszySprzedazy>\n        <tns:PodatekNalezny>${totalVATSales.toFixed(2)}</tns:PodatekNalezny>\n    </tns:SprzedazCtrl>\n`;let zakupCounter=0;return zakupSnapshot.forEach((doc=>{zakupCounter++;const data=doc.data();totalNetPurchases+=parseFloat(data.netAmount||"0"),totalVATPurchases+=parseFloat(data.vatAmount||"0"),xml+=`\n                <tns:ZakupWiersz>\n                <tns:LpZakupu>${zakupCounter}</tns:LpZakupu>\n                    <tns:NrDostawcy>${data.nip}</tns:NrDostawcy>\n                    <tns:NazwaDostawcy>${data.companyName}</tns:NazwaDostawcy>\n                    <tns:DowodZakupu>${data.numerfaktury}</tns:DowodZakupu>\n                    <tns:DataZakupu>${data.purchaseDate}</tns:DataZakupu>\n                    <tns:DataWplywu>${data.purchaseDate}</tns:DataWplywu>\n                    <tns:K_42>${data.netAmount}</tns:K_42>\n                    <tns:K_43>${data.vatAmount}</tns:K_43>\n                </tns:ZakupWiersz>\n            `})),xml+=`\n        <tns:ZakupCtrl>\n            <tns:LiczbaWierszyZakupow>${zakupSnapshot.size}</tns:LiczbaWierszyZakupow>\n            <tns:PodatekNaliczony>${totalVATPurchases.toFixed(2)}</tns:PodatekNaliczony>\n        </tns:ZakupCtrl>\n    </tns:Ewidencja>\n    </tns:JPK>`,xml},saveXMLToStorage=async(xml,year,month)=>{const filePath=`jpk_reports/JPK_${year}_${month}.xml`,bucketName="ccmcolorpartner.appspot.com",file=(new Storage).bucket(bucketName).file(filePath);return console.log(`Saving XML to ${filePath} in bucket ${bucketName}...`),await file.save(xml,{contentType:"application/xml",public:!0,metadata:{cacheControl:"public, max-age=300"}}),console.log(`File saved successfully at ${filePath}`),`https://storage.googleapis.com/${bucketName}/${filePath}`};exports.getDriversDataForWeek=functions.https.onRequest(((req,res)=>{corsHandler(req,res,(async()=>{try{const weekNumber=req.query.weekNumber;if(!weekNumber)return void res.status(400).send("Week number is required.");const drivers=(await admin.database().ref("/drivers").once("value")).val();let weekData={};for(let driverId in drivers){const driverData=drivers[driverId],driverWeekData=driverData.weeks?.[weekNumber];driverWeekData&&(weekData[driverId]={balance:driverData.balance,weeks:{[weekNumber]:driverWeekData}})}res.status(200).send(weekData)}catch(error){console.error("Error fetching drivers: ",error),res.status(500).send(error)}}))}));